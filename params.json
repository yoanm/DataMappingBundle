{"name":"Datamappingbundle","tagline":"Allows data mapping into a table structure","body":"DataMappingBundle\r\n=================\r\n\r\nAllows data mapping into a table structure\r\n\r\n# Usage\r\n## Basic usage\r\n### Position\r\nFirst you must select a slot in a row. Two way to do it : \r\n - One call using `$map->go(ROW, COLUMN)`\r\n - Two calls by first defining column or row and then the other one \r\n```php\r\n$map\r\n  ->goColumn(COLUMN)\r\n  ->goRow(ROW)\r\n```\r\n**Warning : column and row position start at 0**\r\n### Slot content\r\nWhen a slot is selected you can modify it with following functions : \r\n   - `set($content)` : set the slot content\r\n   - `get()` : get the slot content\r\n   - `isDefined()` : will return true if a content is set to the current selected slot else will return false\r\n   - `reset()` : will unset the slot (i.e. remove the content). Calling `isDefined()`after a `reset()` will return false\r\n   - `exist()` : will return true if the current position is a valid slot position. Will return false if it's called just after object instanciation because no position is defined.\r\n\r\n**Warning : Function `set($content)`, `get()`, `isDefined()` and `reset()` will throw an exception if no valid slot position is defined, i.e. if `exist()` return false calling this functions will throw an exception.**\r\n\r\n## Relative move\r\nFunction `go(ROW, COLUMN)`, `goColumn(COLUMN)` and `goRow(ROW)` accept column/row index but also accept a moving step count relative to the current slot position.\r\n\r\nExample : \r\nCurrent position is 2nd column, 4th row (column index 1, row index 3). \r\n - Moving to 5th column, same row : ```$map->goColumn('+3')```\r\n - Moving to 2nd row, same column : ```$map->goRow('-2')```\r\n - Moving to 5th column, 2nd row  : ```$map->go('-2', '+3')```\r\n\r\n## HTML Table behavior\r\nMap can be use like an HTML table with the helper functions `row()` and `slot([SLOT_CONTENT])`.\r\n\r\n**Warning : `slot([SLOT_CONTENT])` will throw an exception if a row position has not been defined, i.e. if `row()` or `go(ROW, COLUMN)`, `goRow(ROW)` functions are not called before.**\r\n\r\nCalling `row()` will set row position to the next row. Basically, after an instanciation `row()` will set row position to the first row, other call will increase the row position.\r\n\r\nCalling `slot([SLOT_CONTENT])` will set column position to the next column. Basically, after a `row()` call, `slot([SLOT_CONTENT])` will set column position to the first column (first slot of the row), other call will increase the column position on the current row.\r\n\r\nExample to reflect this table : \r\n<table>\r\n <tr>\r\n  <td>A</td>\r\n  <td>B</td>\r\n  <td>C</td>\r\n </tr>\r\n <tr>\r\n  <td>D</td>\r\n  <td>E</td>\r\n  <td>F</td>\r\n </tr>\r\n</table>\r\n\r\n```php\r\n/** @var Yoanm\\DataMapping\\Model\\Map $map */\r\n$map->\r\n  ->row()\r\n    ->slot()\r\n      ->set('A')\r\n    ->slot()\r\n      ->set('B')\r\n    ->slot()\r\n      ->set('C')\r\n  ->row()\r\n    ->slot()\r\n      ->set('D')\r\n    ->slot()\r\n      ->set('E')\r\n    ->slot()\r\n      ->set('F')\r\n```\r\nAnd can be simplify by : \r\n```php\r\n/** @var Yoanm\\DataMapping\\Model\\Map $map */\r\n$map->\r\n  ->row()\r\n    ->slot('A')\r\n    ->slot('B')\r\n    ->slot('C')\r\n  ->row()\r\n    ->slot('D')\r\n    ->slot('E')\r\n    ->slot('F')\r\n```\r\nIf table data are stored in an array : \r\n```php\r\n$data = array(\r\n  array('A', 'B', 'C'),\r\n  array('D', 'E', 'F')\r\n);\r\n/** @var Yoanm\\DataMapping\\Model\\Map $map */\r\nforeach ($data as $rowData) {\r\n  $map->row();\r\n  foreach ($rowData as $slotData) {\r\n    $map->slot($slotData);//Or $map->slot()->set($slotData)\r\n  }\r\n}\r\n```\r\n## Colspan\r\nMap, like HTML table, allow a colspan value to merge some slot columns\r\n\r\nExample to reflect this table : \r\n\r\n<table>\r\n <tr>\r\n  <td>A</td>\r\n  <td colspan='3'>B</td>\r\n </tr>\r\n <tr>\r\n  <td>C</td>\r\n  <td>D</td>\r\n  <td>E</td>\r\n  <td>F</td>\r\n </tr>\r\n <tr>\r\n  <td>G</td>\r\n  <td colspan='2'>H</td>\r\n  <td>I</td>\r\n </tr>\r\n</table>\r\n\r\n```php\r\n/** @var Yoanm\\DataMapping\\Model\\Map $map */\r\n$map->\r\n  ->row()\r\n    ->slot('A')\r\n    ->slot('B')\r\n      ->colspan(3)\r\n  ->row()\r\n    ->slot('C')\r\n    ->slot('D')\r\n    ->slot('E')\r\n    ->slot('F')\r\n  ->row()\r\n    ->slot('G')\r\n    ->slot('H')\r\n      ->colspan(2)\r\n    ->slot('I')\r\n```\r\n\r\n`colspan()` work on the current selected root slot. \r\n - Calling `colspan()` on an invalid slot position will throw an exception.\r\n - Calling `colspan()` on a merged slot will work on the root slot, e.g. the top left slot of the area.\r\n\r\nSome helpers : \r\n - `hasSpan()` : return true if current slot position is included in merged area\r\n - `Ã¬sSpan()` : return true if current slot position is include in a merged slot collection. Will return false if it's called on the root slot position.\r\n - `getRootPosition()` : return the root slot position. Return the current position if current slot is the root slot (or has no child slots) or the position of the root slot if current slot is a child slot\r\n - `getChildsPosition()` : return a list of all child slot position\r\n\r\n__Info__ : call `colspan(1)` to remove a previous colspan.\r\n\r\n__Info__ : calling `set(CONTENT)` or `get()` on a child slot will set/get the root slot content\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}